// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------------------
// NextAuth.js Prisma Adapter

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  deliveries         Delivery[]
  expenses           Expense[]
  carExpenses        CarExpense[]
  expensesSummary    ExpensesSummary[]
  carExpensesSummary CarExpensesSummary[]
  expensesStatistics ExpensesStatistics[]

  accounts Account[]
  sessions Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// --------------------------------------
// My Prisma Schema

model Delivery {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  date          DateTime
  totalHours    Int
  totalKms      Int
  grossEarnings Float
  gasPrice      Float
}

model Expense {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  expenseType      String
  date             DateTime
  odometerReading  Float
  gasSpent         Float
  servicesExpenses Float
  otherExpenses    Float
}

model CarExpense {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  date            DateTime
  odometerReading Float
  gasSpent        Float
  serviceExpenses Float
  loanPayment     Float
  insuranceCost   Float
}

model ExpensesSummary {
  id                    String @id @default(cuid())
  user                  User   @relation(fields: [userId], references: [id])
  userId                String
  month                 Int
  year                  Int
  totalGasSpent         Float
  totalServicesExpenses Float
  totalOtherExpenses    Float
}

model CarExpensesSummary {
  id                    String @id @default(cuid())
  user                  User   @relation(fields: [userId], references: [id])
  userId                String
  month                 Int
  year                  Int
  totalGasSpent         Float
  totalServicesExpenses Float
  totalLoanPayments     Float
  totalInsuranceCost    Float
}

model ExpensesStatistics {
  id                   String @id @default(cuid())
  user                 User   @relation(fields: [userId], references: [id])
  userId               String
  month                Int
  year                 Int
  avgCostPerLiter      Float
  totalLitersPurchased Float
  totalSpentAfterGas   Float
  avgCostPerKm         Float
  avgCostPerDay        Float
  avgCostPer30Days     Float
}
