// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  deliveries         Delivery[]
  expenses           Expense[]
  carExpenses        CarExpense[]
  expensesSummary    ExpensesSummary[]
  carExpensesSummary CarExpensesSummary[]
  expensesStatistics ExpensesStatistics[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --------------------------------------
// My Prisma Schema

// This is the main table, 
model Delivery {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  date             DateTime // Date of the delivery (YYYY-MM-DD)
  totalHours       Float
  totalKms         Float
  grossEarnings    Float
  liquidEarnings   Float?
  gasPrice         Decimal  @db.Decimal(4, 3) // 4 digits, 3 decimals
  gasLiters        Float?
  gasSpent         Float?
  grossHourlyRate  Float?
  liquidHourlyRate Float?
}

// Work-related expenses
model Expense {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  expenseType     String
  date            DateTime
  odometerReading Float
  gasSpent        Float
  serviceExpenses Float?
  otherExpenses   Float
}

// Personal vehicle expenses
model CarExpense {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  date            DateTime
  odometerReading Float
  gasSpent        Float
  serviceExpenses Float?
  loanPayment     Float
  insuranceCost   Float
}

// Work-related expenses summary
model ExpensesSummary {
  id                   String @id @default(cuid())
  user                 User   @relation(fields: [userId], references: [id])
  userId               String
  month                Int
  year                 Int
  totalGasSpent        Float
  totalGasLiters       Float?
  totalKms             Float?
  totalServiceExpenses Float?
  totalOtherExpenses   Float
}

// Personal vehicle expenses summary
model CarExpensesSummary {
  id                   String @id @default(cuid())
  user                 User   @relation(fields: [userId], references: [id])
  userId               String
  month                Int
  year                 Int
  totalGasSpent        Float
  totalGasLiters       Float?
  totalKms             Float?
  totalServiceExpenses Float?
  totalLoanPayments    Float
  totalInsuranceCost   Float
}

model ExpensesStatistics {
  id                       String @id @default(cuid())
  user                     User   @relation(fields: [userId], references: [id])
  userId                   String
  month                    Int
  year                     Int
  avgCostPerLiter          Float
  totalLitersPurchased     Float
  totalSpentAfterGas       Float
  avgCostPerKm             Float
  avgCostPerDay            Float
  avgCostPer30Days         Float
  totalEarnings            Float?
  totalExpenses            Float?
  netEarnings              Float?
  liquidEarningsPercentage Float?
  avgGrossHourlyRate       Float?
  avrLiquidHourlyRate      Float?
}
